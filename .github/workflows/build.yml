name: 构建 Tauri 应用程序

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*' # 当推送 v* 标签时触发
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # 允许手动触发

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # macOS Apple Silicon
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # macOS Intel
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest' # Windows x64
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
          - platform: 'windows-latest' # Windows x86
            args: '--target i686-pc-windows-msvc'
            target: 'i686-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 安装 Rust (稳定版)
        uses: dtolnay/rust-toolchain@stable
        with:
          # 为所有平台添加目标架构
          targets: ${{ matrix.target }}

      - name: 安装 Windows 依赖 (仅 Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # 安装 NASM 和 Perl 用于 OpenSSL 编译
          choco install nasm strawberryperl
          # 确保工具在 PATH 中
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Strawberry\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 安装前端依赖
        run: pnpm install

      - name: 构建 Tauri 应用
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 强制使用 vendored OpenSSL
          OPENSSL_STATIC: 1
          OPENSSL_VENDOR: 1
          # Windows 特定环境变量
          VCPKG_ROOT: ${{ matrix.platform == 'windows-latest' && 'C:\vcpkg' || '' }}
        with:
          args: ${{ matrix.args }}
          # 自动发布到 GitHub Releases (仅在标签推送或手动触发时)
          tagName: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.run_number) || (startsWith(github.ref, 'refs/tags/') && github.ref_name || '') }}
          releaseName: ${{ github.event_name == 'workflow_dispatch' && format('EzLottery Offline v{0}', github.run_number) || (startsWith(github.ref, 'refs/tags/') && format('EzLottery Offline {0}', github.ref_name) || '') }}
          releaseBody: |
            ## 🎉 EzLottery Offline ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.run_number) || github.ref_name }}
            
            ### 📦 支持的平台
            - **Windows x64/x86**: `.exe` 可执行文件和 `.msi` 安装包
            - **macOS Apple Silicon/Intel**: `.app` 应用程序和 `.dmg` 安装包
            
            ### 🚀 新特性和改进
            请查看提交历史了解详细更改内容。
            
            ### 📥 下载说明
            - **Windows 用户**: 下载 `.msi` 文件进行安装，或直接运行 `.exe` 文件
            - **macOS 用户**: 下载 `.dmg` 文件进行安装
            
            ### 🔧 构建信息
            - 构建编号: #${{ github.run_number }}
            - 提交哈希: ${{ github.sha }}
            - 构建时间: ${{ github.event.head_commit.timestamp }}
          releaseDraft: true
          prerelease: false
          includeDebug: false

 