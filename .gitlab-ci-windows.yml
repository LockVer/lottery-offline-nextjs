# 专用 Windows 构建配置
# 适用于自搭建 GitLab，仅构建 Windows 版本

stages:
  - test       # 测试阶段 (Linux)
  - build      # Windows 构建阶段
  - release    # 发布阶段

variables:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"

# 缓存配置 - 加速构建
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - node_modules/
    - target/
    - .cargo/

# 快速测试 - 使用 Linux Runner 验证代码
test-code:
  stage: test
  image: ubuntu:20.04
  before_script:
    # 安装基础工具
    - apt-get update && apt-get install -y curl build-essential
    # 安装 Node.js
    - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    - apt-get install -y nodejs
  script:
    # 安装依赖并构建前端
    - npm ci
    - npm run build
    - echo "✅ 前端构建测试通过，可以进行 Windows 构建"
  only:
    - main
    - develop
    - merge_requests
  tags:
    - linux    # 使用 Linux Runner

# Windows 构建 - 主要构建任务
build-windows:
  stage: build
  before_script:
    # 设置 PowerShell 执行策略
    - Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
    
    # 检查并安装 Node.js
    - |
      if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
        Write-Host "安装 Node.js..."
        # 下载并安装 Node.js
        $nodeUrl = "https://nodejs.org/dist/v18.17.0/node-v18.17.0-x64.msi"
        $nodeInstaller = "$env:TEMP\nodejs.msi"
        Invoke-WebRequest -Uri $nodeUrl -OutFile $nodeInstaller
        Start-Process msiexec.exe -ArgumentList "/i", $nodeInstaller, "/quiet", "/norestart" -Wait
        # 更新环境变量
        $env:PATH = "$env:PROGRAMFILES\nodejs;$env:PATH"
      } else {
        Write-Host "✅ Node.js 已安装: $(node --version)"
      }
    
    # 检查并安装 Rust
    - |
      if (-not (Get-Command rustc -ErrorAction SilentlyContinue)) {
        Write-Host "安装 Rust..."
        # 下载并安装 Rust
        $rustUrl = "https://win.rustup.rs/x86_64"
        $rustInstaller = "$env:TEMP\rustup-init.exe"
        Invoke-WebRequest -Uri $rustUrl -OutFile $rustInstaller
        & $rustInstaller -y --default-toolchain stable
        # 更新环境变量
        $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
      } else {
        Write-Host "✅ Rust 已安装: $(rustc --version)"
      }
    
    # 检查工具版本
    - Write-Host "构建环境信息:"
    - Write-Host "Node.js: $(node --version)"
    - Write-Host "npm: $(npm --version)"
    - Write-Host "Rust: $(rustc --version)"
    
  script:
    # 安装项目依赖
    - Write-Host "📦 安装前端依赖..."
    - npm ci
    
    # 构建前端
    - Write-Host "🔨 构建前端..."
    - npm run build
    
    # 构建 Windows 版本
    - Write-Host "🚀 开始构建 Windows 版本..."
    - npm run tauri build
    
    # 查找生成的文件
    - Write-Host "📋 构建产物："
    - Get-ChildItem -Path "src-tauri\target\release\bundle" -Recurse -Include "*.msi", "*.exe" | ForEach-Object { Write-Host "   - $($_.FullName)" }
    
  # 保存构建产物
  artifacts:
    name: "windows-x64-$CI_COMMIT_SHORT_SHA"
    paths:
      - src-tauri/target/release/bundle/msi/
      - src-tauri/target/release/bundle/nsis/
    expire_in: 30 days  # 保留 30 天
    
  # 触发条件
  only:
    - main      # 主分支
    - develop   # 开发分支
    - tags      # 版本标签
    
  # 指定使用 Windows Runner
  tags:
    - windows

# 创建发布版本 (仅标签触发)
create-release:
  stage: release
  image: alpine:latest
  dependencies:
    - build-windows
  before_script:
    - apk add --no-cache curl jq
  script:
    # 创建发布文件夹
    - mkdir -p release-files
    
    # 收集 Windows 构建产物
    - find . -name "*.msi" -exec cp {} release-files/ \; || true
    - find . -name "*.exe" -exec cp {} release-files/ \; || true
    
    # 显示文件列表
    - echo "📦 发布文件："
    - ls -la release-files/
    
    # 创建 GitLab Release (仅当有标签时)
    - |
      if [ "$CI_COMMIT_TAG" ]; then
        echo "🚀 创建 GitLab Release: $CI_COMMIT_TAG"
        
        # 使用 GitLab API 创建 Release
        curl --fail --request POST \
          --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "name": "Windows 版本 '$CI_COMMIT_TAG'",
            "tag_name": "'$CI_COMMIT_TAG'",
            "description": "🎉 Windows 自动构建版本\n\n### 📦 包含文件\n- Windows 安装包 (.msi)\n- Windows 可执行文件 (.exe)\n\n### 🔧 构建信息\n- 构建时间: '$CI_PIPELINE_CREATED_AT'\n- 提交版本: '$CI_COMMIT_SHORT_SHA'\n- 分支: '$CI_COMMIT_REF_NAME'\n\n### 📥 下载说明\n1. 下载 .msi 文件进行标准安装\n2. 或下载 .exe 文件直接运行\n\n---\n*由 GitLab CI/CD 自动构建*"
          }' \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
      else
        echo "ℹ️  非标签提交，跳过 Release 创建"
      fi
    
  artifacts:
    name: "windows-release-$CI_COMMIT_TAG"
    paths:
      - release-files/
    expire_in: 90 days
    
  only:
    - tags  # 仅在推送标签时创建发布
    
  tags:
    - linux  # 发布任务使用 Linux Runner

# 手动测试构建 - 用于调试
manual-test:
  stage: build
  before_script:
    - Write-Host "🔍 手动测试构建开始..."
    - Write-Host "Node.js: $(node --version)"
    - Write-Host "Rust: $(rustc --version)"
  script:
    - npm ci
    - npm run build
    - Write-Host "✅ 手动测试完成！"
  artifacts:
    name: "manual-test-$CI_COMMIT_SHORT_SHA"
    paths:
      - dist/
    expire_in: 3 days
  when: manual  # 仅手动触发
  tags:
    - windows 