# Docker 交叉编译 Windows 版本
# 仅需要 Linux Runner，使用 Docker 容器进行 Windows 交叉编译

stages:
  - test
  - build
  - release

variables:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"

# 缓存配置
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - node_modules/
    - target/
    - .cargo/

# 快速测试
test-code:
  stage: test
  image: node:18
  script:
    - npm ci
    - npm run build
    - echo "✅ 前端构建测试通过"
  only:
    - main
    - develop
    - merge_requests

# Docker 交叉编译 Windows 版本
build-windows-docker:
  stage: build
  image: ubuntu:20.04
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    # 配置国内镜像源以解决网络问题
    - |
      cat > /etc/apt/sources.list << EOF
      deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse
      deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse
      deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse
      deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse
      EOF
    
    # 安装必要工具
    - apt-get update
    - apt-get install -y curl build-essential pkg-config libssl-dev
    
    # 安装 Docker CLI (使用国内镜像)
    - curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/gpg | apt-key add -
    - echo "deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu focal stable" > /etc/apt/sources.list.d/docker.list
    - apt-get update
    - apt-get install -y docker-ce-cli
    
    # 安装 Node.js (使用国内镜像)
    - curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/nodesource/deb_18.x/setup_18.x | bash -
    - apt-get install -y nodejs
    
    # 安装 Rust 和 Windows 目标 (使用国内镜像)
    - export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup
    - export RUSTUP_UPDATE_ROOT=https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup
    - curl --proto '=https' --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh | sh -s -- -y
    - source ~/.cargo/env
    - rustup target add x86_64-pc-windows-gnu
    
    # 安装 mingw-w64 用于 Windows 交叉编译
    - apt-get install -y mingw-w64
    
    # 配置 Cargo 交叉编译
    - mkdir -p ~/.cargo
    - |
      cat >> ~/.cargo/config.toml << EOF
      [target.x86_64-pc-windows-gnu]
      linker = "x86_64-w64-mingw32-gcc"
      ar = "x86_64-w64-mingw32-ar"
      EOF
  
  script:
    # 构建前端
    - echo "🔨 构建前端..."
    - npm ci
    - npm run build
    
    # 交叉编译 Windows 版本
    - echo "🚀 开始 Windows 交叉编译..."
    - cd src-tauri
    
    # 使用 cargo 直接编译 Windows 目标
    - cargo build --release --target x86_64-pc-windows-gnu
    
    # 检查生成的文件
    - echo "📋 编译产物："
    - ls -la target/x86_64-pc-windows-gnu/release/
    - find target/x86_64-pc-windows-gnu/release/ -name "*.exe" | head -10
    
    # 创建简单的打包
    - mkdir -p ../release-windows/
    - cp target/x86_64-pc-windows-gnu/release/*.exe ../release-windows/ || true
    - echo "✅ Windows 交叉编译完成"
    
  artifacts:
    name: "windows-cross-compiled-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-windows/
      - src-tauri/target/x86_64-pc-windows-gnu/release/*.exe
    expire_in: 30 days
    
  only:
    - main
    - develop
    - tags
    
  tags:
    - linux    # 仅需要 Linux Runner

# 高级 Docker 方案 - 使用专门的交叉编译容器
build-windows-advanced:
  stage: build
  image: ghcr.io/cross-rs/cross:x86_64-pc-windows-gnu
  before_script:
    # 配置镜像源
    - |
      if [ -f /etc/apt/sources.list ]; then
        cat > /etc/apt/sources.list << EOF
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse
        EOF
      fi
    - apt-get update || true
    # 安装 Node.js
    - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    - apt-get install -y nodejs
  script:
    # 构建前端
    - npm ci
    - npm run build
    
    # 使用 cross 进行交叉编译
    - cd src-tauri
    - cargo install cross --git https://github.com/cross-rs/cross
    - cross build --release --target x86_64-pc-windows-gnu
    
    # 整理产物
    - mkdir -p ../release-advanced/
    - cp target/x86_64-pc-windows-gnu/release/*.exe ../release-advanced/ || true
    
  artifacts:
    name: "windows-advanced-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-advanced/
    expire_in: 30 days
    
  only:
    - tags    # 仅在标签时使用高级方案
    
  tags:
    - linux
    
  when: manual  # 手动触发

# 简单方案 - 基础交叉编译
build-windows-simple:
  stage: build
  image: rust:1.70
  before_script:
    # 配置镜像源解决网络问题
    - |
      cat > /etc/apt/sources.list << EOF
      deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main
      deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main
      deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ bullseye-security main
      EOF
    
    # 安装交叉编译工具
    - apt-get update
    - apt-get install -y mingw-w64 nodejs npm
    - rustup target add x86_64-pc-windows-gnu
    
    # 配置交叉编译
    - mkdir -p ~/.cargo
    - echo '[target.x86_64-pc-windows-gnu]' >> ~/.cargo/config.toml
    - echo 'linker = "x86_64-w64-mingw32-gcc"' >> ~/.cargo/config.toml
    
  script:
    # 构建项目
    - npm ci
    - npm run build
    
    # 仅编译 Rust 部分 (不使用 Tauri bundle)
    - cd src-tauri
    - cargo build --release --target x86_64-pc-windows-gnu
    
    # 复制可执行文件
    - mkdir -p ../release-simple/
    - cp target/x86_64-pc-windows-gnu/release/*.exe ../release-simple/
    - echo "✅ 简单 Windows 编译完成"
    
  artifacts:
    name: "windows-simple-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-simple/
    expire_in: 7 days
    
  only:
    - develop    # 开发分支使用简单方案测试
    
  tags:
    - linux

# 网络优化版本 - 使用预装环境
build-windows-optimized:
  stage: build
  image: ubuntu:22.04  # 使用更新的版本
  before_script:
    # 使用阿里云镜像源
    - |
      cat > /etc/apt/sources.list << EOF
      deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse
      deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse
      deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
      deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse
      EOF
    
    # 快速安装基础工具
    - apt-get update
    - apt-get install -y wget curl build-essential pkg-config libssl-dev
    
    # 安装 Node.js (使用二进制包)
    - wget -qO- https://nodejs.org/dist/v18.19.0/node-v18.19.0-linux-x64.tar.xz | tar -xJ -C /opt
    - ln -sf /opt/node-v18.19.0-linux-x64/bin/* /usr/local/bin/
    
    # 安装 Rust (使用快速安装)
    - wget -qO- https://forge.rust-lang.org/infra/channel-layout.html
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
    - source ~/.cargo/env
    - rustup target add x86_64-pc-windows-gnu
    
    # 安装 Windows 交叉编译工具
    - apt-get install -y mingw-w64
    
    # 配置 Cargo
    - mkdir -p ~/.cargo
    - |
      cat >> ~/.cargo/config.toml << EOF
      [target.x86_64-pc-windows-gnu]
      linker = "x86_64-w64-mingw32-gcc"
      ar = "x86_64-w64-mingw32-ar"
      EOF
  
  script:
    # 构建前端
    - echo "🔨 构建前端..."
    - npm ci
    - npm run build
    
    # 交叉编译 Windows 版本
    - echo "🚀 开始 Windows 交叉编译..."
    - cd src-tauri
    - source ~/.cargo/env
    - cargo build --release --target x86_64-pc-windows-gnu
    
    # 整理产物
    - mkdir -p ../release-optimized/
    - cp target/x86_64-pc-windows-gnu/release/*.exe ../release-optimized/ || true
    - echo "✅ 优化版 Windows 编译完成"
    
  artifacts:
    name: "windows-optimized-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-optimized/
    expire_in: 30 days
    
  only:
    - main
    
  tags:
    - linux

# 创建发布
create-release:
  stage: release
  image: alpine:latest
  dependencies:
    - build-windows-docker
  before_script:
    - apk add --no-cache curl jq
  script:
    - mkdir -p final-release/
    - cp -r release-windows/* final-release/ || true
    - ls -la final-release/
    
    # 创建 Release (如果是标签)
    - |
      if [ "$CI_COMMIT_TAG" ]; then
        echo "🚀 创建 Release: $CI_COMMIT_TAG"
        curl --fail --request POST \
          --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "name": "Windows 交叉编译版本 '$CI_COMMIT_TAG'",
            "tag_name": "'$CI_COMMIT_TAG'",
            "description": "🎉 使用 Docker 交叉编译的 Windows 版本\n\n### 📦 包含文件\n- Windows 可执行文件 (.exe)\n\n### ⚠️ 注意事项\n- 此版本使用交叉编译生成\n- 如遇到兼容性问题，建议使用物理 Windows 机器编译的版本\n\n### 🔧 编译信息\n- 编译方式: Docker 交叉编译\n- 目标平台: x86_64-pc-windows-gnu\n- 构建时间: '$CI_PIPELINE_CREATED_AT'\n\n---\n*由 GitLab CI/CD 自动构建*"
          }' \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
      fi
      
  artifacts:
    name: "windows-final-$CI_COMMIT_TAG"
    paths:
      - final-release/
    expire_in: 90 days
    
  only:
    - tags
    
  tags:
    - linux 