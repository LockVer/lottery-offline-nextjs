# GitLab CI/CD 配置 - Windows 原生编译
# 适用于全新的 Windows 系统，自动安装所有必要工具

stages:
  - build

variables:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"
  # PowerShell 执行策略
  POWERSHELL_TELEMETRY_OPTOUT: 1

# 缓存配置
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - node_modules/
    - .cargo/
    - C:\tools\

# Windows 原生编译 - 全新系统自动配置
build-windows-native:
  stage: build
  before_script:
    # 设置 PowerShell 执行策略
    - Set-ExecutionPolicy Bypass -Scope Process -Force
    - echo "🚀 开始配置全新 Windows 编译环境..."
    
    # 检查并安装 Chocolatey 包管理器
    - echo "📦 安装 Chocolatey 包管理器..."
    - |
      if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
        Write-Host "安装 Chocolatey..."
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        refreshenv
      } else {
        Write-Host "✅ Chocolatey 已安装"
      }
    
    # 安装 Git（如果没有的话）
    - echo "🔧 检查并安装 Git..."
    - |
      if (!(Get-Command git -ErrorAction SilentlyContinue)) {
        Write-Host "安装 Git..."
        choco install git -y
        refreshenv
      } else {
        Write-Host "✅ Git 已安装: $(git --version)"
      }
    
    # 安装 Node.js 22.16.0
    - echo "📦 安装 Node.js 22.16.0..."
    - |
      if (!(Get-Command node -ErrorAction SilentlyContinue)) {
        Write-Host "安装 Node.js 22.16.0..."
        choco install nodejs --version=22.16.0 -y --force
        refreshenv
        # 手动添加到 PATH（防止环境变量问题）
        $env:PATH += ";C:\Program Files\nodejs"
      } else {
        $nodeVersion = node --version
        Write-Host "✅ Node.js 已安装: $nodeVersion"
        if ($nodeVersion -notlike "v22.16.*") {
          Write-Host "升级到 Node.js 22.16.0..."
          choco upgrade nodejs --version=22.16.0 -y --force
          refreshenv
        }
      }
    
    # 安装 Rust
    - echo "🦀 安装 Rust..."
    - |
      if (!(Get-Command cargo -ErrorAction SilentlyContinue)) {
        Write-Host "安装 Rust..."
        # 下载 Rust 安装器
        $rustupUrl = "https://win.rustup.rs/x86_64"
        $rustupPath = "$env:TEMP\rustup-init.exe"
        Invoke-WebRequest -Uri $rustupUrl -OutFile $rustupPath -UseBasicParsing
        
        # 静默安装 Rust
        Start-Process -FilePath $rustupPath -ArgumentList "-y", "--default-toolchain", "stable" -Wait -NoNewWindow
        Remove-Item $rustupPath
        
        # 手动添加 Cargo 到 PATH
        $env:PATH += ";$env:USERPROFILE\.cargo\bin"
        
        # 刷新环境变量
        $env:CARGO_HOME = "$env:USERPROFILE\.cargo"
        $env:RUSTUP_HOME = "$env:USERPROFILE\.rustup"
      } else {
        Write-Host "✅ Rust 已安装: $(cargo --version)"
      }
    
    # 安装 Visual Studio Build Tools（Rust 在 Windows 上需要）
    - echo "🔧 安装 Visual Studio Build Tools..."
    - |
      if (!(Get-Command cl -ErrorAction SilentlyContinue)) {
        Write-Host "安装 Visual Studio Build Tools 2022..."
        choco install visualstudio2022buildtools -y
        choco install visualstudio2022-workload-vctools -y
        refreshenv
      } else {
        Write-Host "✅ Visual Studio Build Tools 已安装"
      }
    
    # 验证所有工具安装
    - echo "🔍 验证开发环境..."
    - |
      Write-Host "=== 环境检查 ==="
      try {
        $nodeVer = node --version
        Write-Host "✅ Node.js: $nodeVer"
      } catch {
        Write-Host "❌ Node.js 未正确安装"
        exit 1
      }
      
      try {
        $npmVer = npm --version
        Write-Host "✅ npm: $npmVer"
      } catch {
        Write-Host "❌ npm 未正确安装"
        exit 1
      }
      
      try {
        $cargoVer = cargo --version
        Write-Host "✅ Cargo: $cargoVer"
      } catch {
        Write-Host "❌ Rust/Cargo 未正确安装"
        exit 1
      }
      
      try {
        $rustcVer = rustc --version
        Write-Host "✅ Rustc: $rustcVer"
      } catch {
        Write-Host "❌ Rustc 未正确安装"
        exit 1
      }
      
      Write-Host "🎉 所有工具安装完成！"
    
  script:
    # 设置 npm 镜像源（提高下载速度）
    - echo "⚙️ 配置 npm 镜像源..."
    - npm config set registry https://registry.npmmirror.com
    
    # 安装项目依赖
    - echo "📦 安装项目依赖..."
    - npm ci
    
    # 构建前端
    - echo "🔨 构建前端..."
    - npm run build
    
    # 编译 Tauri 应用
    - echo "🚀 开始编译 Tauri 应用..."
    - cd src-tauri
    
    # 确保 Rust 环境变量正确
    - $env:CARGO_HOME = "$env:USERPROFILE\.cargo"
    - $env:RUSTUP_HOME = "$env:USERPROFILE\.rustup"
    - $env:PATH += ";$env:USERPROFILE\.cargo\bin"
    
    # 编译 Release 版本
    - cargo build --release
    
    # 检查编译产物
    - echo "📋 检查编译产物..."
    - |
      $exeFiles = Get-ChildItem -Path "target\release\" -Filter "*.exe" -File
      if ($exeFiles.Count -gt 0) {
        Write-Host "✅ 找到可执行文件:"
        foreach ($file in $exeFiles) {
          Write-Host "  - $($file.Name) ($([math]::Round($file.Length/1MB, 2)) MB)"
        }
      } else {
        Write-Host "❌ 未找到可执行文件"
        Get-ChildItem -Path "target\release\" -File | Format-Table Name, Length
      }
    
    # 整理发布文件
    - echo "📦 整理发布文件..."
    - cd ..
    - New-Item -ItemType Directory -Path "release-windows" -Force
    - |
      $sourceFiles = Get-ChildItem -Path "src-tauri\target\release\" -Filter "*.exe" -File
      if ($sourceFiles.Count -gt 0) {
        foreach ($file in $sourceFiles) {
          Copy-Item $file.FullName -Destination "release-windows\" -Force
          Write-Host "✅ 复制: $($file.Name)"
        }
      } else {
        Write-Host "❌ 没有找到可执行文件进行复制"
      }
    
    # 显示最终结果
    - echo "📋 最终发布文件:"
    - Get-ChildItem -Path "release-windows" -File | Format-Table Name, Length, LastWriteTime
    - echo "🎉 Windows 原生编译完成！"
    
  artifacts:
    name: "windows-native-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-windows/
    expire_in: 30 days
    when: always
    reports:
      # 生成编译报告
      junit: []
    
  only:
    - main
    - develop
    - merge_requests
    - tags
    
  tags:
    - windows  # 确保使用 Windows Runner
    
  # 超时设置（全新系统首次安装可能需要较长时间）
  timeout: 2h
  
  # 允许失败，方便调试
  allow_failure: true

# 快速测试作业（跳过工具安装，适用于已配置的环境）
build-windows-quick:
  stage: build
  before_script:
    - echo "🔍 快速环境检查..."
    - node --version
    - npm --version
    - cargo --version
    
  script:
    - echo "📦 安装依赖..."
    - npm ci
    
    - echo "🔨 构建前端..."
    - npm run build
    
    - echo "🚀 编译应用..."
    - cd src-tauri
    - cargo build --release
    
    - echo "📦 整理文件..."
    - cd ..
    - New-Item -ItemType Directory -Path "release-quick" -Force
    - Copy-Item "src-tauri\target\release\*.exe" "release-quick\" -ErrorAction SilentlyContinue
    - Get-ChildItem "release-quick"
    
  artifacts:
    name: "windows-quick-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-quick/
    expire_in: 7 days
    
  only:
    - develop  # 仅在开发分支使用快速模式
    
  tags:
    - windows
    
  when: manual  # 手动触发

 