# GitLab CI/CD Configuration - Windows Native Build
# Suitable for clean Windows systems with automatic tool installation

stages:
  - build

variables:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"
  # PowerShell execution policy
  POWERSHELL_TELEMETRY_OPTOUT: 1
  # Skip automatic Git clone (Git may not be installed)
  GIT_STRATEGY: none

# Cache configuration
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - node_modules/
    - .cargo/
    - C:\tools\

# Windows native build - automatic configuration for clean systems
build-windows-native:
  stage: build
  before_script:
    # Set PowerShell execution policy
    - Set-ExecutionPolicy Bypass -Scope Process -Force
    - Write-Host "Starting Windows build environment setup..."
    
    # Install Chocolatey package manager
    - Write-Host "Installing Chocolatey package manager..."
    - |
      if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Chocolatey..."
        try {
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          refreshenv
          Write-Host "Chocolatey installation completed"
        } catch {
          Write-Host "Chocolatey installation failed, trying alternative method..."
          $chocoScript = "$env:TEMP\install-chocolatey.ps1"
          Invoke-WebRequest -Uri 'https://community.chocolatey.org/install.ps1' -OutFile $chocoScript -UseBasicParsing
          & $chocoScript
          Remove-Item $chocoScript
        }
      } else {
        Write-Host "Chocolatey already installed"
      }
    
    # Install Git
    - Write-Host "Checking and installing Git..."
    - |
      if (!(Get-Command git -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Git..."
        try {
          choco install git -y --no-progress
          refreshenv
          $env:PATH += ";C:\Program Files\Git\bin;C:\Program Files\Git\cmd"
          Write-Host "Git installation completed"
        } catch {
          Write-Host "Git installation failed, trying direct download..."
          $gitUrl = "https://github.com/git-for-windows/git/releases/download/v2.47.1.windows.1/PortableGit-2.47.1-64-bit.7z.exe"
          $gitPath = "$env:TEMP\git-portable.exe"
          $gitDir = "C:\tools\git"
          
          Invoke-WebRequest -Uri $gitUrl -OutFile $gitPath -UseBasicParsing
          New-Item -ItemType Directory -Path $gitDir -Force
          Start-Process -FilePath $gitPath -ArgumentList "-o$gitDir", "-y" -Wait -NoNewWindow
          Remove-Item $gitPath
          
          $env:PATH += ";$gitDir\bin;$gitDir\cmd"
        }
      } else {
        Write-Host "Git already installed"
      }
    
    # Manual repository clone
    - Write-Host "Manual repository clone..."
    - |
      $projectPath = $PWD.Path
      Write-Host "Current working directory: $projectPath"
      
      if (Test-Path ".git") {
        Write-Host "Repository already exists"
      } else {
        Write-Host "Cloning repository..."
        try {
          git clone $env:CI_REPOSITORY_URL .
          git checkout $env:CI_COMMIT_SHA
          Write-Host "Repository clone completed"
        } catch {
          Write-Host "Git clone failed, trying HTTP method..."
          $httpUrl = $env:CI_REPOSITORY_URL -replace 'git@([^:]+):', 'https://$1/'
          git clone $httpUrl .
          git checkout $env:CI_COMMIT_SHA
        }
      }
    
    # Install Node.js 22.16.0
    - Write-Host "Installing Node.js 22.16.0..."
    - |
      if (!(Get-Command node -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Node.js 22.16.0..."
        try {
          choco install nodejs --version=22.16.0 -y --force --no-progress
          refreshenv
          $env:PATH += ";C:\Program Files\nodejs"
          Write-Host "Node.js installation completed"
        } catch {
          Write-Host "Node.js installation failed, trying direct download..."
          $nodeUrl = "https://nodejs.org/dist/v22.16.0/node-v22.16.0-win-x64.zip"
          $nodePath = "$env:TEMP\node.zip"
          $nodeDir = "C:\tools\nodejs"
          
          Invoke-WebRequest -Uri $nodeUrl -OutFile $nodePath -UseBasicParsing
          Expand-Archive $nodePath $nodeDir -Force
          Remove-Item $nodePath
          
          $env:PATH += ";$nodeDir\node-v22.16.0-win-x64"
        }
      } else {
        $nodeVersion = node --version
        Write-Host "Node.js already installed: $nodeVersion"
        if ($nodeVersion -notlike "v22.16.*") {
          Write-Host "Upgrading to Node.js 22.16.0..."
          choco upgrade nodejs --version=22.16.0 -y --force --no-progress
          refreshenv
        }
      }
    
    # Install Rust
    - Write-Host "Installing Rust..."
    - |
      if (!(Get-Command cargo -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Rust..."
        try {
          $rustupUrl = "https://win.rustup.rs/x86_64"
          $rustupPath = "$env:TEMP\rustup-init.exe"
          Invoke-WebRequest -Uri $rustupUrl -OutFile $rustupPath -UseBasicParsing
          
          Start-Process -FilePath $rustupPath -ArgumentList "-y", "--default-toolchain", "stable" -Wait -NoNewWindow
          Remove-Item $rustupPath
          
          $env:PATH += ";$env:USERPROFILE\.cargo\bin"
          $env:CARGO_HOME = "$env:USERPROFILE\.cargo"
          $env:RUSTUP_HOME = "$env:USERPROFILE\.rustup"
          Write-Host "Rust installation completed"
        } catch {
          Write-Host "Rust installation failed"
          exit 1
        }
      } else {
        Write-Host "Rust already installed"
      }
    
    # Install Visual Studio Build Tools
    - Write-Host "Installing Visual Studio Build Tools..."
    - |
      if (!(Get-Command cl -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Visual Studio Build Tools 2022..."
        try {
          Write-Host "Trying Chocolatey installation..."
          choco install visualstudio2022buildtools -y --no-progress --timeout=3600
          choco install visualstudio2022-workload-vctools -y --no-progress --timeout=3600
          refreshenv
          Write-Host "Visual Studio Build Tools installation completed"
        } catch {
          Write-Host "Chocolatey installation failed, trying direct installer..."
          $vsUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
          $vsPath = "$env:TEMP\vs_buildtools.exe"
          
          Write-Host "Downloading Visual Studio Build Tools installer..."
          Invoke-WebRequest -Uri $vsUrl -OutFile $vsPath -UseBasicParsing
          
          Write-Host "Installing Visual Studio Build Tools (offline mode)..."
          $arguments = @(
            "--quiet"
            "--wait"
            "--add", "Microsoft.VisualStudio.Workload.VCTools"
            "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
            "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22621"
            "--includeRecommended"
            "--nocache"
          )
          Start-Process -FilePath $vsPath -ArgumentList $arguments -Wait -NoNewWindow
          Remove-Item $vsPath
          
          $vctools = Get-ChildItem "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\" | Sort-Object Name -Descending | Select-Object -First 1
          if ($vctools) {
            $env:PATH += ";$($vctools.FullName)\bin\Hostx64\x64"
          }
        }
      } else {
        Write-Host "Visual Studio Build Tools already installed"
      }
    
    # Verify development environment
    - Write-Host "Verifying development environment..."
    - |
      Write-Host "=== Environment Check ==="
      $allGood = $true
      
      try {
        $nodeVer = node --version
        Write-Host "Node.js: $nodeVer"
      } catch {
        Write-Host "Node.js not properly installed"
        $allGood = $false
      }
      
      try {
        $npmVer = npm --version
        Write-Host "npm: $npmVer"
      } catch {
        Write-Host "npm not properly installed"
        $allGood = $false
      }
      
      try {
        $cargoVer = cargo --version
        Write-Host "Cargo: $cargoVer"
      } catch {
        Write-Host "Rust/Cargo not properly installed"
        $allGood = $false
      }
      
      try {
        $rustcVer = rustc --version
        Write-Host "Rustc: $rustcVer"
      } catch {
        Write-Host "Rustc not properly installed"
        $allGood = $false
      }
      
      if ($allGood) {
        Write-Host "All tools installation completed!"
      } else {
        Write-Host "Some tools installation failed, but continuing with build..."
      }
    
  script:
    # Configure npm registry
    - Write-Host "Configuring npm registry..."
    - npm config set registry https://registry.npmmirror.com
    
    # Install project dependencies
    - Write-Host "Installing project dependencies..."
    - npm ci
    
    # Build frontend
    - Write-Host "Building frontend..."
    - npm run build
    
    # Compile Tauri application
    - Write-Host "Starting Tauri application compilation..."
    - cd src-tauri
    
    # Ensure Rust environment variables are correct
    - $env:CARGO_HOME = "$env:USERPROFILE\.cargo"
    - $env:RUSTUP_HOME = "$env:USERPROFILE\.rustup"
    - $env:PATH += ";$env:USERPROFILE\.cargo\bin"
    
    # Compile Release version
    - cargo build --release
    
    # Check build artifacts
    - Write-Host "Checking build artifacts..."
    - |
      $exeFiles = Get-ChildItem -Path "target\release\" -Filter "*.exe" -File
      if ($exeFiles.Count -gt 0) {
        Write-Host "Found executable files:"
        foreach ($file in $exeFiles) {
          Write-Host "  - $($file.Name) ($([math]::Round($file.Length/1MB, 2)) MB)"
        }
      } else {
        Write-Host "No executable files found"
        Get-ChildItem -Path "target\release\" -File | Format-Table Name, Length
      }
    
    # Organize release files
    - Write-Host "Organizing release files..."
    - cd ..
    - New-Item -ItemType Directory -Path "release-windows" -Force
    - |
      $sourceFiles = Get-ChildItem -Path "src-tauri\target\release\" -Filter "*.exe" -File
      if ($sourceFiles.Count -gt 0) {
        foreach ($file in $sourceFiles) {
          Copy-Item $file.FullName -Destination "release-windows\" -Force
          Write-Host "Copied: $($file.Name)"
        }
      } else {
        Write-Host "No executable files found to copy"
      }
    
    # Display final results
    - Write-Host "Final release files:"
    - Get-ChildItem -Path "release-windows" -File | Format-Table Name, Length, LastWriteTime
    - Write-Host "Windows native compilation completed!"
    
  artifacts:
    name: "windows-native-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-windows/
    expire_in: 30 days
    when: always
    reports:
      junit: []
    
  only:
    - main
    - develop
    - merge_requests
    - tags
    
  tags:
    - windows
    
  timeout: 2h
  allow_failure: true

# Quick test job for pre-configured environments
build-windows-quick:
  stage: build
  variables:
    GIT_STRATEGY: fetch
  
  before_script:
    - Write-Host "Quick environment check..."
    - node --version
    - npm --version
    - cargo --version
    
  script:
    - Write-Host "Installing dependencies..."
    - npm ci
    
    - Write-Host "Building frontend..."
    - npm run build
    
    - Write-Host "Compiling application..."
    - cd src-tauri
    - cargo build --release
    
    - Write-Host "Organizing files..."
    - cd ..
    - New-Item -ItemType Directory -Path "release-quick" -Force
    - Copy-Item "src-tauri\target\release\*.exe" "release-quick\" -ErrorAction SilentlyContinue
    - Get-ChildItem "release-quick"
    
  artifacts:
    name: "windows-quick-$CI_COMMIT_SHORT_SHA"
    paths:
      - release-quick/
    expire_in: 7 days
    
  only:
    - develop
    
  tags:
    - windows
    
  when: manual 
 