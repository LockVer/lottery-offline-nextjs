# GitLab CI/CD 跨平台构建配置
# 支持 Windows, macOS, Linux 自动构建

# 定义构建阶段
stages:
  - test          # 测试阶段
  - build         # 构建阶段
  - release       # 发布阶段

# 全局变量
variables:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"
  NODE_VERSION: "18"

# 缓存配置 - 加速构建
cache:
  paths:
    - node_modules/
    - .npm/
    - target/
    - ~/.cargo/

# 测试任务 - 在 Linux 环境下快速验证
test:
  stage: test
  image: node:18
  before_script:
    # 安装 Rust
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source ~/.cargo/env
    # 安装系统依赖
    - apt-get update
    - apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
  script:
    - npm ci
    - npm run build
    - npm run tauri info
  only:
    - merge_requests
    - develop
    - main

# Windows 构建
build:windows:
  stage: build
  tags:
    - windows    # 需要 Windows Runner
  before_script:
    # 安装 Node.js (如果 Runner 没有预装)
    - choco install nodejs --version=18.17.0 -y
    # 安装 Rust (如果 Runner 没有预装)
    - |
      if (-not (Get-Command rustc -ErrorAction SilentlyContinue)) {
        Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "rustup-init.exe"
        .\rustup-init.exe -y
        $env:PATH += ";$env:USERPROFILE\.cargo\bin"
      }
  script:
    - npm ci
    - npm run build
    - npm run tauri build
  artifacts:
    name: "windows-x64-$CI_COMMIT_SHORT_SHA"
    paths:
      - src-tauri/target/release/bundle/msi/
      - src-tauri/target/release/bundle/nsis/
    expire_in: 7 days
  only:
    - tags
    - main
    - develop

# macOS 构建 (Intel)
build:macos-intel:
  stage: build
  tags:
    - macos      # 需要 macOS Runner
  before_script:
    # 安装 Node.js
    - brew install node@18
    - export PATH="/opt/homebrew/opt/node@18/bin:$PATH"
    # 安装 Rust 目标平台
    - rustup target add x86_64-apple-darwin
  script:
    - npm ci
    - npm run build
    - npm run tauri build --target x86_64-apple-darwin
  artifacts:
    name: "macos-intel-$CI_COMMIT_SHORT_SHA"
    paths:
      - src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/
      - src-tauri/target/x86_64-apple-darwin/release/bundle/macos/
    expire_in: 7 days
  only:
    - tags
    - main

# macOS 构建 (Apple Silicon)
build:macos-silicon:
  stage: build
  tags:
    - macos      # 需要 macOS Runner
  before_script:
    - brew install node@18
    - export PATH="/opt/homebrew/opt/node@18/bin:$PATH"
    - rustup target add aarch64-apple-darwin
  script:
    - npm ci
    - npm run build
    - npm run tauri build --target aarch64-apple-darwin
  artifacts:
    name: "macos-silicon-$CI_COMMIT_SHORT_SHA"
    paths:
      - src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/
      - src-tauri/target/aarch64-apple-darwin/release/bundle/macos/
    expire_in: 7 days
  only:
    - tags
    - main

# Linux 构建
build:linux:
  stage: build
  image: ubuntu:20.04
  before_script:
    # 安装系统依赖
    - apt-get update
    - apt-get install -y curl build-essential libssl-dev pkg-config
    - apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
    # 安装 Node.js
    - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    - apt-get install -y nodejs
    # 安装 Rust
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source ~/.cargo/env
  script:
    - npm ci
    - npm run build
    - npm run tauri build
  artifacts:
    name: "linux-x64-$CI_COMMIT_SHORT_SHA"
    paths:
      - src-tauri/target/release/bundle/deb/
      - src-tauri/target/release/bundle/appimage/
    expire_in: 7 days
  only:
    - tags
    - main
    - develop

# 创建发布版本 (仅限标签)
release:
  stage: release
  image: alpine:latest
  dependencies:
    - build:windows
    - build:macos-intel
    - build:macos-silicon
    - build:linux
  before_script:
    - apk add --no-cache curl
  script:
    # 创建发布文件夹
    - mkdir -p release-files
    
    # 收集所有构建产物
    - find . -name "*.msi" -exec cp {} release-files/ \; || true
    - find . -name "*.exe" -exec cp {} release-files/ \; || true
    - find . -name "*.dmg" -exec cp {} release-files/ \; || true
    - find . -name "*.deb" -exec cp {} release-files/ \; || true
    - find . -name "*.AppImage" -exec cp {} release-files/ \; || true
    
    # 显示收集到的文件
    - ls -la release-files/
    
    # 使用 GitLab Release API 创建发布
    - |
      curl --request POST \
        --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
        --header "Content-Type: application/json" \
        --data '{
          "name": "Release '$CI_COMMIT_TAG'",
          "tag_name": "'$CI_COMMIT_TAG'",
          "description": "🎉 自动构建发布版本\n\n### 📦 支持平台\n- Windows x64 (.msi/.exe)\n- macOS Intel (.dmg)\n- macOS Apple Silicon (.dmg)\n- Linux x64 (.deb/.AppImage)\n\n构建版本: '$CI_COMMIT_SHORT_SHA'"
        }' \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
  artifacts:
    name: "release-$CI_COMMIT_TAG"
    paths:
      - release-files/
    expire_in: 30 days
  only:
    - tags

# 手动触发的快速测试构建
test-build:
  stage: build
  image: ubuntu:20.04
  before_script:
    - apt-get update
    - apt-get install -y curl build-essential libssl-dev pkg-config
    - apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
    - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    - apt-get install -y nodejs
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source ~/.cargo/env
  script:
    - npm ci
    - npm run build
    - echo "✅ 测试构建成功！可以进行正式的跨平台构建。"
  artifacts:
    name: "test-build-$CI_COMMIT_SHORT_SHA"
    paths:
      - dist/
    expire_in: 1 day
  when: manual  # 手动触发
  except:
    - tags 